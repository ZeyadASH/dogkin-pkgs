<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="robot">

  
    <xacro:include filename="material.xacro" />
    <xacro:include filename="inertial_calc.xacro" />
    <!--xacro:include filename="$(find robot_description)/urdf/robot_gz.gazebo" /-->
  
  <xacro:property name="arm_radius" value="0.5"/>
  <!--cylinder radius= "${arm_radius}" length="7"/-->
  
  <link name="world"/>   <!-- Dummy link for the robot's base -->

  <joint name="world_to_base_link" type="fixed">
    <parent link="world"/>
    <child link="base_link"/>
    <origin xyz="0 0 0.05" rpy="0 0 0"/>
  </joint>
  
<link name="base_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.4 0.4 0.1"/>
      </geometry>
      <material name="purple"/>
    </visual>

    <collision>
      <geometry>
        <box size= "0.4 0.4 0.1"/>
      </geometry>
    </collision>

    <xacro:box_inertial mass="0.1" x="0.4" y="0.4" z="0.1">      <!-- Describe how the distribution of mass affects the rotation of the link -->
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </xacro:box_inertial>
  </link>

<!--  IF THE JOINT IS REVOLUTE, YOU NEED TO DEFINE THE AXIS AND LIMITS
      BUT IF THE JOINT IS CONTINUOUS, YOU DON'T NEED TO DEFINE THE AXIS AND LIMITS

  <joint name="base_to_front_right_wheel" type="revolute">
    <parent link="base_link"/>
    <child link="front_right_wheel"/>
    <origin xyz="0.2 0.2 0.0" rpy="0 1.57075 0" />
    <axis xyz="0 0 1"/>
    <limit effort="10.0" velocity="10.0" lower="-1.57" upper="1.57"/>
    </joint>
-->
  <joint name="base_to_front_right_wheel" type="continuous">
    <parent link="base_link"/>
    <child link="front_right_wheel"/>
    <origin xyz="0.2 0.2 0.0" rpy="0 1.57075 0" />
    <axis xyz="0 0 1"/>
  
  </joint>

   <link name="front_right_wheel">
    <visual>
      <geometry>
        <cylinder radius="0.07" length="0.03"/>
      </geometry>
      <material name="red"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.07" length="0.03"/>
      </geometry>
    </collision>
    <xacro:cylinder_inertial mass="0.1" radius="0.07" length="0.03">
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </xacro:cylinder_inertial>

  </link>


  <joint name="base_to_front_left_wheel" type="continuous">
    <parent link="base_link"/>
    <child link="front_left_wheel"/>
    <origin xyz="-0.2 0.2 0.0" rpy="0 1.57075 0" />
    <axis xyz="0 0 1"/>

  </joint>

   <link name="front_left_wheel">
    <visual>
      <geometry>
        <cylinder radius="0.07" length="0.03"/>
      </geometry>
      <material name="red"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.07" length="0.03"/>
      </geometry>
    </collision>
    <xacro:cylinder_inertial mass="0.1" radius="0.07" length="0.03">
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </xacro:cylinder_inertial>

  </link>
  

  <joint name="base_to_back_left_wheel" type="continuous">
    <parent link="base_link"/>
    <child link="back_left_wheel"/>
    <origin xyz="-0.2 -0.2 0.0" rpy="0 1.57075 0" />
    <axis xyz="0 0 1"/>

  </joint>

   <link name="back_left_wheel">
    <visual>
      <geometry>
        <cylinder radius="0.07" length="0.03"/>
      </geometry>
      <material name="red"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.07" length="0.03"/>
      </geometry>
    </collision>
    <xacro:cylinder_inertial mass="0.1" radius="0.07" length="0.03">
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </xacro:cylinder_inertial>

  </link>

<joint name="base_to_back_right_wheel" type="continuous">
    <parent link="base_link"/>
    <child link="back_right_wheel"/>
    <origin xyz="0.2 -0.2 0.0" rpy="0 1.57075 0" />
    <axis xyz="0 0 1"/>
  </joint>

   <link name="back_right_wheel">
    <visual>
      <geometry>
        <cylinder radius="0.07" length="0.03"/>
      </geometry>
      <material name="red"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.07" length="0.03"/>
      </geometry>
    </collision>
    <xacro:cylinder_inertial mass="0.1" radius="0.07" length="0.03">
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </xacro:cylinder_inertial>

  </link>


  <gazebo>
  <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">

    <!-- Plugin update rate in Hz -->
    <updateRate>10</updateRate>

    <!-- Name of left joint, defaults to `left_joint` -->
    <leftJoint>base_to_back_left_wheel</leftJoint>

    <!-- Name of right joint, defaults to `right_joint` -->
    <rightJoint>base_to_back_right_wheel</rightJoint>

    <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m -->
    <wheelSeparation>0.5380</wheelSeparation>

    <!-- Diameter of the wheels, in meters, defaults to 0.15 m -->
    <wheelDiameter>0.2410</wheelDiameter>

    <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 -->
    <wheelAcceleration>1.0</wheelAcceleration>

    <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
    <wheelTorque>20</wheelTorque>

    <!-- Topic to receive geometry_msgs/Twist message commands, defaults to `cmd_vel` -->
    <commandTopic>cmd_vel</commandTopic>

    <!-- Topic to publish nav_msgs/Odometry messages, defaults to `odom` -->
    <odometryTopic>odom</odometryTopic>

    <!-- Odometry frame, defaults to `odom` -->
    <odometryFrame>odom</odometryFrame>

    <!-- Robot frame to calculate odometry from, defaults to `base_footprint` -->
    <robotBaseFrame>base_footprint</robotBaseFrame>

    <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
    <odometrySource>1</odometrySource>

    <!-- Set to true to publish transforms for the wheel links, defaults to false -->
    <publishWheelTF>true</publishWheelTF>

    <!-- Set to true to publish transforms for the odometry, defaults to true -->
    <publishOdom>true</publishOdom>

    <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
    <publishWheelJointState>true</publishWheelJointState>

    <!-- Set to true to swap right and left wheels, defaults to true -->
    <legacyMode>false</legacyMode>
  </plugin>
</gazebo>

</robot>